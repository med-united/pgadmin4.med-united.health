apiVersion: v1
kind: ConfigMap
metadata:
 name: pgadmin-config
data:
 servers.json: |
   {
       "Servers": {
         "1": {
           "Name": "PostgreSQL DB",
           "Group": "Servers",
           "Port": 5432,
           "Username": "postgres",
           "Host": "postgres.cfayfrqrsmtj.eu-central-1.rds.amazonaws.com",
           "SSLMode": "prefer",
           "MaintenanceDB": "postgres"
         }
       }
   }
---

kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: pgadmin4-gp2
provisioner: kubernetes.io/aws-ebs
volumeBindingMode: WaitForFirstConsumer
mountOptions:
  - uid=5050
parameters:
  type: gp2
  fsType: ext4 

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
 name: pgadmin
spec:
 serviceName: pgadmin-service
 podManagementPolicy: Parallel
 replicas: 1
 updateStrategy:
   type: RollingUpdate
 selector:
   matchLabels:
     app: pgadmin4
 template:
   metadata:
     labels:
       app: pgadmin4
   spec:
     terminationGracePeriodSeconds: 10
     containers:
       - name: pgadmin4
         image: dpage/pgadmin4:latest
         imagePullPolicy: Always
         env:
         - name: PGADMIN_DEFAULT_EMAIL
           value: manuel.blechschmidt@incentergy.de
         - name: PGADMIN_DEFAULT_PASSWORD
           valueFrom:
             secretKeyRef:
               name: pgadmin4
               key: pgadmin-password
         ports:
         - name: http
           containerPort: 80
           protocol: TCP
         volumeMounts:
         - name: pgadmin-config
           mountPath: /pgadmin4/servers.json
           subPath: servers.json
           readOnly: true
         - name: pgadmin-data
           mountPath: /var/lib/pgadmin
     volumes:
     - name: pgadmin-config
       configMap:
         name: pgadmin-config
 volumeClaimTemplates:
 - metadata:
     name: pgadmin-data
   spec:
     accessModes: [ "ReadWriteOnce" ]
     storageClassName: pgadmin4-gp2
     resources:
       requests:
         storage: 3Gi

---

kind: Service
apiVersion: v1
metadata:
  name: pgadmin4
spec:
  selector:
    app: pgadmin4
  ports:
    - port: 80
  type: NodePort
---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: pgadmin4
  annotations:
    kubernetes.io/ingress.class: "nginx"
spec:
  tls:
  - hosts:
    - pgadmin4.med-united.health
    secretName: pgadmin4-tls
  rules:
  - host: pgadmin4.med-united.health
    http:
      paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: pgadmin4
              port:
                number: 80
